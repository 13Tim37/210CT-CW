list <- INPUT list
low <- INPUT lowest value in range
high <- INPUT highest value in range

FUNCTION BINARY-SEARCH(LIST, LOW, HIGH):
    L <- LENGTH(LIST)                                           //1

    IF L = 1
        index = 0
    ELSE
	index = INT(((L/2)+0.5)//1)

    r <- LIST[index]                                            //1

    IF L = 1 AND r < LOW OR r > HIGH+1                          //3
        RETURN FALSE                                            //1
    ELSEIF r >= LOW AND r <= HIGH                               //1
        RETURN TRUE                                             //1
    ELSEIF LOW > r                                              //1
        RETURN BINARY-SEARCH(LIST[index..],LOW,HIGH)            //log2(n)
    ELSEIF HIGH < r                                             //1
        RETURN BINARY-SEARCH(LIST[..index],LOW,HIGH)            //log2(n)
    ELSE                                                        //1
        RETURN FALSE                                            //1

OUTPUT BINARY-SEARCH(LIST,LOW,HIGH)


// Efficiency total: 2log2(n) + 12
// Big(O) value = O(log(n))
// Best case O(1) as value could be found on first run.
// The recursive function are log2(n) (Base 2) as everytime
// we run the function the list length is divided by 2.
